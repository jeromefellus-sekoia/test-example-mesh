name: citadelle
ignored_values:
  - ""
  - unknown
pipeline:
  - name: json_event
    external:
      name: json.parse-json
      properties:
        input_field: "{{original.message}}"
        output_field: message
  - name: parsed_date
    external:
      name: date.parse
      properties:
        input_field: "{{json_event.message.timestamp}}"
        output_field: datetime
        timezone: UTC
  - name: set_ecs_fields
  - name: set_custom_fields
    description: Seckiot fields
  - name: event
    description: event field
  - name: observer
    description: observer field
  - name: network
    description: network field
  - name: rule
    description: rule field
  - name: source
    description: source field
  - name: destination
    description: destination field
  - name: vulnerability
    description: vulnerability field
stages:
  set_ecs_fields:
    actions:
      - set:
          "@timestamp": "{{parsed_date.datetime}}"
  set_custom_fields:
    actions:
      - set:
          seckiot.module: "{{json_event.message.skt.module}}"
          seckiot.alert.id: "{{json_event.message.skt.alert_id}}"
          seckiot.assets.id: |
            [ {%- for asset in json_event.message.skt.assets -%}
              "{{asset.id}}",
              {%- endfor -%}
            ]
          seckiot.assets.name: |
            [ {%- for asset in json_event.message.skt.assets -%}
              "{{(asset.name if asset.name else "unknown")}}",
              {%- endfor -%}
            ]
          seckiot.sensor.name: "{{json_event.message.skt.sensor}}"
          seckiot.sniffer.name: "{{json_event.message.skt.sniffer}}"
          seckiot.assets.entity: |
            [ {%- for asset in json_event.message.skt.assets -%}
              "{{ (asset.entity if asset.entity else "unknown") }}",
              {%- endfor -%}
            ]
          seckiot.assets.system: |
            [ {%- for asset in json_event.message.skt.assets -%}
              "{{ (asset.system if asset.system else "unknown")}}",
              {%- endfor -%}
            ]
          seckiot.assets.version: |
            [ {%- for asset in json_event.message.skt.assets -%}
              "{{ (asset.version if asset.version else "unknown") }}",
              {%- endfor -%}
            ]
          seckiot.assets.category: |
            [ {%- for asset in json_event.message.skt.assets -%}
              "{{ (asset.category if asset.category else "unknown")}}",
              {%- endfor -%}
            ]
          seckiot.catch_area.name: "{{json_event.message.skt.capture_zone}}"
          seckiot.assets.description: |
            [ {%- for asset in json_event.message.skt.assets -%}
              "{{(asset.description if asset.description else "unknown")}}",
              {%- endfor -%}
            ]
          seckiot.assets.localisation: |
            [ {%- for asset in json_event.message.skt.assets -%}
              "{{(asset.localisation if asset.localisation else "unknown")}}",
              {%- endfor -%}
            ]
          seckiot.assets.perdue_level: |
            [ {%- for asset in json_event.message.skt.assets -%}
              "{{(asset.level if asset.level else "unknown")}}",
              {%- endfor -%}
            ]
  event:
    actions:
      - set:
          event.kind: "{{json_event.message.event.kind}}"
          event.type: "{{json_event.message.event.type}}"
          event.outcome: "{{json_event.message.event.outcome}}"
          event.category: "{{json_event.message.event.category}}"
          event.severity: "{{json_event.message.event.severity}}"
  observer:
    actions:
      - set:
          observer.name: "{{json_event.message.event.outcome}}"
          observer.type: "{{json_event.message.observer._type}}"
          observer.vendor: "{{json_event.message.observer.vendor}}"
          observer.product: "{{json_event.message.observer.product}}"
          observer.version: "{{json_event.message.observer.version}}"
  network:
    actions:
      - set:
          network.protocol: "{{json_event.message.protocol.name}}"
          network.transport: "{{json_event.message.protocol.transport}}"
  rule:
    actions:
      - set:
          rule.id: "{{json_event.message.rule.uuid}}"
          rule.name: "{{json_event.message.rule.name}}"
          rule.author: "{{json_event.message.rule.author}}"
          rule.version: "{{json_event.message.rule.version}}"
          rule.description: "{{json_event.message.rule.description}}"
  source:
    actions:
      - set:
          source.ip: "{{json_event.message.source.ip}}"
          source.mac: "{{json_event.message.source.mac}}"
          source.port: "{{json_event.message.source.port}}"
  destination:
    actions:
      - set:
          destination.ip: "{{json_event.message.destination.ip}}"
          destination.mac: "{{json_event.message.destination.mac}}"
          destination.port: "{{json_event.message.destination.port}}"
  vulnerability:
    actions:
      - set:
          vulnerability.id: "{{json_event.message.vulnerability.id}}"
          vulnerability.category: "{{json_event.message.vulnerability.category}}"
          vulnerability.severity: "{{json_event.message.vulnerability.severity}}"
          vulnerability.reference: "{{json_event.message.vulnerability.reference}}"
          vulnerability.report_id: "{{json_event.message.vulnerability.report_id}}"
          vulnerability.score.base: "{{json_event.message.vulnerability.score.base}}"
          vulnerability.description: "{{json_event.message.vulnerability.description}}"
          vulnerability.enumeration: "{{json_event.message.vulnerability.enumeration}}"
          vulnerability.score.version: "{{json_event.message.vulnerability.score.version}}"
          vulnerability.classification: "{{json_event.message.vulnerability.classification}}"
          vulnerability.scanner.vendor: "{{json_event.message.vulnerability.scanner.vendor}}"
          vulnerability.score.temporal: "{{json_event.message.vulnerability.score.temporal}}"
          vulnerability.score.environmental: "{{json_event.message.vulnerability.score.environmental}}"
